"use strict";(self.webpackChunktsif_documentation=self.webpackChunktsif_documentation||[]).push([[0],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>y});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(r),y=i,m=c["".concat(p,".").concat(y)]||c[y]||d[y]||a;return r?n.createElement(m,o(o({ref:t},u),{},{components:r})):n.createElement(m,o({ref:t},u))}));function y(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},4887:(e,t,r)=>{r.d(t,{UE:()=>o,h8:()=>i,qh:()=>p,y$:()=>a});r(7462),r(7294);var n=r(3905);const i=e=>{let{children:t,text:r}=e;return(0,n.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},r)},a=e=>{let{children:t}=e;return(0,n.kt)("span",{style:{color:"#faa"}},t)};function o(e){let{children:t,version:r}=e;const i="#ffffff";return(0,n.kt)("span",{style:{backgroundColor:"#414141",color:i,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},r)}function l(e,t,r,i){return(0,n.kt)("div",{style:{backgroundColor:i,color:r,border:"1px "+r+" solid",borderRadius:"5px",padding:".1rem .4rem"}},t)}const p=e=>{let{children:t}=e;return l(0,"Released","#afa","#181")}},940:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var n=r(7462),i=(r(7294),r(3905)),a=r(4887);const o={sidebar_position:3,title:"Signatures"},l=void 0,p={unversionedId:"cryptography/signatures",id:"version-3.0.1/cryptography/signatures",title:"Signatures",description:"Signing",source:"@site/versioned_docs/version-3.0.1/cryptography/signatures.mdx",sourceDirName:"cryptography",slug:"/cryptography/signatures",permalink:"/TSIF-Documentation/docs/cryptography/signatures",draft:!1,editUrl:"https://github.com/3StudioOnline/TSIF-Documentation/edit/master/versioned_docs/version-3.0.1/cryptography/signatures.mdx",tags:[],version:"3.0.1",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Signatures"},sidebar:"tutorialSidebar",previous:{title:"Digest",permalink:"/TSIF-Documentation/docs/cryptography/digest"},next:{title:"Extract Public Key",permalink:"/TSIF-Documentation/docs/cryptography/extract-public-key"}},s={},u=[{value:"Signing",id:"signing",level:2},{value:"Verifying",id:"verifying",level:2}],d={toc:u};function c(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,n.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"signing"},"Signing"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Create Cryptographic Signature")," Signs data using a cryptographic key. This function requires inputs as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Data")," ",(0,i.kt)(a.h8,{text:"1",mdxType:"Step"})," : Byte array, data that will be signed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Private Key (PEM)")," ",(0,i.kt)(a.h8,{text:"2",mdxType:"Step"})," : Byte array, private key encoded as ",(0,i.kt)("inlineCode",{parentName:"li"},"PEM"),".")),(0,i.kt)("p",null,"There is also two additional optional inputs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Password")," ",(0,i.kt)(a.h8,{text:"3",mdxType:"Step"})," : UTF-8 String, pass-phrase used to decrypt the private key\n(should stay empty if the key is not encrypted)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Message Digest")," ",(0,i.kt)(a.h8,{text:"4",mdxType:"Step"})," : Enumeration, the digest algorithm used in the process of signing.\n",(0,i.kt)("inlineCode",{parentName:"li"},"Default")," will use the default algorithm associated with the key type.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Create Cryptographic Signature",src:r(5638).Z,width:"878",height:"619"})),(0,i.kt)("p",null,"If successful, returns byte array containing the calculated ",(0,i.kt)("em",{parentName:"p"},"signature")," ",(0,i.kt)(a.h8,{text:"5",mdxType:"Step"}),"."),(0,i.kt)("h2",{id:"verifying"},"Verifying"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Verify Cryptographic Signature")," Verifies a cryptographic signature against the data that was signed.\nThis function requires inputs as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Signature")," ",(0,i.kt)(a.h8,{text:"1",mdxType:"Step"})," : Byte array, the signature that will be verified."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Data")," ",(0,i.kt)(a.h8,{text:"2",mdxType:"Step"})," : Byte array, data that was signed with."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Key (PEM)")," ",(0,i.kt)(a.h8,{text:"3",mdxType:"Step"})," : Byte array, key encoded as ",(0,i.kt)("inlineCode",{parentName:"li"},"PEM"),"\n(By default, verification keys are expected to be public).")),(0,i.kt)("p",null,"There is also three additional optional inputs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Is Private")," ",(0,i.kt)(a.h8,{text:"4",mdxType:"Step"})," : Boolean, if true, ",(0,i.kt)("inlineCode",{parentName:"li"},"Key (PEM)")," will be treated as a private key."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Password")," ",(0,i.kt)(a.h8,{text:"5",mdxType:"Step"})," : UTF-8 String, pass-phrase used to decrypt the private key\n(should stay empty if the key is not encrypted, or when verifying by a public key)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Message Digest")," ",(0,i.kt)(a.h8,{text:"6",mdxType:"Step"})," : Enumeration, the digest algorithm used in the process of signing.\n",(0,i.kt)("inlineCode",{parentName:"li"},"Default")," will use the default algorithm associated with the key type.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Verify Cryptographic Signature",src:r(5182).Z,width:"1056",height:"754"})),(0,i.kt)("p",null,"If successful, returns a boolean value that indicates whether the ",(0,i.kt)("em",{parentName:"p"},"signature")," ",(0,i.kt)(a.h8,{text:"1",mdxType:"Step"})," is ",(0,i.kt)("em",{parentName:"p"},"valid")," ",(0,i.kt)(a.h8,{text:"7",mdxType:"Step"}),"."))}c.isMDXComponent=!0},5638:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/sign-0bccc568d747157b97823df8654a3719.png"},5182:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/verify-68b8471f0d18510e0cb3fe90960bf599.png"}}]);