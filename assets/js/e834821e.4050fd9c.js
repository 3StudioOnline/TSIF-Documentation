"use strict";(self.webpackChunktsif_documentation=self.webpackChunktsif_documentation||[]).push([[9654],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>f});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function c(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),s=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):c(c({},r),e)),t},d=function(e){var r=s(e.components);return n.createElement(l.Provider,{value:r},e.children)},p={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=s(t),f=o,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||i;return t?n.createElement(m,c(c({ref:r},d),{},{components:t})):n.createElement(m,c({ref:r},d))}));function f(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=u;var a={};for(var l in r)hasOwnProperty.call(r,l)&&(a[l]=r[l]);a.originalType=e,a.mdxType="string"==typeof e?e:o,c[1]=a;for(var s=2;s<i;s++)c[s]=t[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4887:(e,r,t)=>{t.d(r,{UE:()=>c,h8:()=>o,qh:()=>l,y$:()=>i});t(7462),t(7294);var n=t(3905);const o=e=>{let{children:r,text:t}=e;return(0,n.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},t)},i=e=>{let{children:r}=e;return(0,n.kt)("span",{style:{color:"#faa"}},r)};function c(e){let{children:r,version:t}=e;const o="#ffffff";return(0,n.kt)("span",{style:{backgroundColor:"#414141",color:o,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},t)}function a(e,r,t,o){return(0,n.kt)("div",{style:{backgroundColor:o,color:t,border:"1px "+t+" solid",borderRadius:"5px",padding:".1rem .4rem"}},r)}const l=e=>{let{children:r}=e;return a(0,"Released","#afa","#181")}},2202:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var n=t(7462),o=(t(7294),t(3905)),i=t(4887);const c={sidebar_position:2,title:"Sign Record"},a=void 0,l={unversionedId:"ipns/functions/low-level/record/sign-record",id:"version-2.1.0/ipns/functions/low-level/record/sign-record",title:"Sign Record",description:"Sign Record",source:"@site/versioned_docs/version-2.1.0/ipns/functions/low-level/record/sign-record.mdx",sourceDirName:"ipns/functions/low-level/record",slug:"/ipns/functions/low-level/record/sign-record",permalink:"/TSIF-Documentation/docs/2.1.0/ipns/functions/low-level/record/sign-record",draft:!1,editUrl:"https://github.com/3StudioOnline/TSIF-Documentation/edit/master/versioned_docs/version-2.1.0/ipns/functions/low-level/record/sign-record.mdx",tags:[],version:"2.1.0",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Sign Record"},sidebar:"tutorialSidebar",previous:{title:"Build Record",permalink:"/TSIF-Documentation/docs/2.1.0/ipns/functions/low-level/record/build-record"},next:{title:"Verify Record",permalink:"/TSIF-Documentation/docs/2.1.0/ipns/functions/low-level/record/verify-record"}},s={},d=[{value:"Sign Record",id:"sign-record",level:2}],p={toc:d};function u(e){let{components:r,...c}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,c,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"sign-record"},"Sign Record"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"IPNS Sign Record")," Signs an existing IPNS record data structure using a private key. This function requires inputs as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Record")," ",(0,o.kt)(i.h8,{text:"1",mdxType:"Step"})," : Record structure reference, a mutable reference to the IPNS record instance being signed."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Private Key (PEM)")," ",(0,o.kt)(i.h8,{text:"2",mdxType:"Step"})," : Byte array, they private key in ",(0,o.kt)("inlineCode",{parentName:"li"},"PEM")," encoding. Used to sign the record.")),(0,o.kt)("p",null,"There's also an optional input ",(0,o.kt)("inlineCode",{parentName:"p"},"Password")," ",(0,o.kt)(i.h8,{text:"3",mdxType:"Step"})," : UTF-8 String, pass-phrase used to decrypt the private key\n(should stay empty if the key is not encrypted)."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"IPNS Sign Record",src:t(2795).Z,width:"707",height:"352"})))}u.isMDXComponent=!0},2795:(e,r,t)=>{t.d(r,{Z:()=>n});const n=t.p+"assets/images/sign_record-7b24769b03c5e39cabb7c19bd873048e.png"}}]);