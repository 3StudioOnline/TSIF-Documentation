"use strict";(self.webpackChunktsif_documentation=self.webpackChunktsif_documentation||[]).push([[6145],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},76598:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:1,title:"Overview"},o=void 0,s={unversionedId:"manifest-manager/overview",id:"version-3.1.0/manifest-manager/overview",title:"Overview",description:"What is Chunker Manifest Manager",source:"@site/versioned_docs/version-3.1.0/manifest-manager/overview.mdx",sourceDirName:"manifest-manager",slug:"/manifest-manager/overview",permalink:"/TSIF-Documentation/docs/manifest-manager/overview",draft:!1,editUrl:"https://github.com/3StudioOnline/TSIF-Documentation/edit/master/versioned_docs/version-3.1.0/manifest-manager/overview.mdx",tags:[],version:"3.1.0",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"Unpack CAR File",permalink:"/TSIF-Documentation/docs/car/unpack-car-file"},next:{title:"Step-by-step Workflow Guide",permalink:"/TSIF-Documentation/docs/manifest-manager/workflow-guide"}},l={},p=[{value:"What is Chunker Manifest Manager",id:"what-is-chunker-manifest-manager",level:2},{value:"Version Tab",id:"version-tab",level:2},{value:"Upload Tab",id:"upload-tab",level:2},{value:"Manifest Tab",id:"manifest-tab",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"what-is-chunker-manifest-manager"},"What is Chunker Manifest Manager"),(0,r.kt)("p",null,"The ",(0,r.kt)("strong",{parentName:"p"},"Chunker Manifest Manager")," is a tool designed to simplify the process of\nversion management for both project and ",(0,r.kt)("em",{parentName:"p"},"Game Features"),", ",(0,r.kt)("inlineCode",{parentName:"p"},".pak")," file uploading, as\nwell as creation and uploading of the game manifest.\nThis tool is directly integrated with\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.ipfs.tech/"},"IPFS (InterPlanetary File System)"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ipfs.tech/concepts/ipns/"},"IPNS (InterPlanetary Naming System)"),"\nand enables you to utilize these decentralized storage systems with ease."),(0,r.kt)("p",null,"With its user-friendly interface, the ",(0,r.kt)("strong",{parentName:"p"},"Chunker Manifest Manager")," simplifies\ncomplex processes into just a few clicks, allowing developers to efficiently\nmanage updates of their projects and ",(0,r.kt)("em",{parentName:"p"},"Game Features"),".\nEach tab in the ",(0,r.kt)("strong",{parentName:"p"},"Chunker Manifest Manager")," is designed to guide you through\nthe essential steps of managing your game project, from versioning and file\nuploading to manifest creation and deployment.\nThis structured approach ensures a smooth and efficient workflow for projects of\nany complexity and scope."),(0,r.kt)("h2",{id:"version-tab"},"Version Tab"),(0,r.kt)("p",null,"The Version tab is the starting point for preparing your game project for\nbuilding and deployment. Here, you will set the version for your entire project\nas well as for individual ",(0,r.kt)("em",{parentName:"p"},"Game Features"),". This ensures that any updates or\nchanges made to ",(0,r.kt)("em",{parentName:"p"},"Game Features")," are properly represented by their versions. By\nmaintaining a clear versioning system, you can easily track changes and updates\nover time, providing a structured timeline of your project's development\nhistory."),(0,r.kt)("h2",{id:"upload-tab"},"Upload Tab"),(0,r.kt)("p",null,"The Upload tab is where you will be uploading ",(0,r.kt)("em",{parentName:"p"},"Game Feature")," ",(0,r.kt)("inlineCode",{parentName:"p"},".pak")," files to\nIPFS by selecting your files and initiating the uploading process with a single\nclick. After the upload is complete, the unique content identifiers (CIDs) for\nthe uploaded files will be displayed and can be copied to be later used to\nreference these files on the IPFS network."),(0,r.kt)("h2",{id:"manifest-tab"},"Manifest Tab"),(0,r.kt)("p",null,"The Manifest tab is where you construct (and update) the game's manifest before\nuploading it to IPNS. You first select the ",(0,r.kt)("em",{parentName:"p"},"Game Features")," that should be\nincluded in the manifest to construct. The action of constructing a manifest\nresults in a newly generated ",(0,r.kt)("inlineCode",{parentName:"p"},"GameManifest.json")," file. After constructing the\nmanifest, you can upload it to IPNS to create or update the IPNS Record that is\nassociated with your PEM Key."))}u.isMDXComponent=!0}}]);