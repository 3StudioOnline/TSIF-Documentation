"use strict";(self.webpackChunktsif_documentation=self.webpackChunktsif_documentation||[]).push([[5101],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>y});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),y=i,m=d["".concat(p,".").concat(y)]||d[y]||u[y]||o;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4887:(e,t,n)=>{n.d(t,{UE:()=>a,h8:()=>i,qh:()=>p,y$:()=>o});n(87462),n(67294);var r=n(3905);const i=e=>{let{children:t,text:n}=e;return(0,r.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},n)},o=e=>{let{children:t}=e;return(0,r.kt)("span",{style:{color:"#faa"}},t)};function a(e){let{children:t,version:n}=e;const i="#ffffff";return(0,r.kt)("span",{style:{backgroundColor:"#414141",color:i,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},n)}function l(e,t,n,i){return(0,r.kt)("div",{style:{backgroundColor:i,color:n,border:"1px "+n+" solid",borderRadius:"5px",padding:".1rem .4rem"}},t)}const p=e=>{let{children:t}=e;return l(0,"Released","#afa","#181")}},94708:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var r=n(87462),i=(n(67294),n(3905)),o=n(4887);const a={sidebar_position:5,title:"Key Conversions"},l=void 0,p={unversionedId:"cryptography/key-conversions",id:"version-2.1.0/cryptography/key-conversions",title:"Key Conversions",description:"Various cryptographic key conversions are available as functions.",source:"@site/versioned_docs/version-2.1.0/cryptography/key-conversions.mdx",sourceDirName:"cryptography",slug:"/cryptography/key-conversions",permalink:"/TSIF-Documentation/docs/2.1.0/cryptography/key-conversions",draft:!1,editUrl:"https://github.com/3StudioOnline/TSIF-Documentation/edit/master/versioned_docs/version-2.1.0/cryptography/key-conversions.mdx",tags:[],version:"2.1.0",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Key Conversions"},sidebar:"tutorialSidebar",previous:{title:"Extract Public Key",permalink:"/TSIF-Documentation/docs/2.1.0/cryptography/extract-public-key"},next:{title:"Overview",permalink:"/TSIF-Documentation/docs/2.1.0/ipns/overview"}},c={},s=[{value:"Examples",id:"examples",level:2},{value:"Convert Public Key",id:"convert-public-key",level:3},{value:"Convert Private Key",id:"convert-private-key",level:3}],u={toc:s};function d(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Various cryptographic key conversions are available as functions.\nSeparate functions convert ",(0,i.kt)("em",{parentName:"p"},"public")," and ",(0,i.kt)("em",{parentName:"p"},"private")," keys between different encodings.\nAvailable encodings are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"PEM")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"EC"))),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"Elliptic Curve encoding only works with Elliptic Curve keys, using another key type will fail.")),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"convert-public-key"},"Convert Public Key"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Convert Public Key")," converts a public key from one encoding into another. This function requires inputs as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Public Key")," ",(0,i.kt)(o.h8,{text:"1",mdxType:"Step"})," : Byte array, public key encoded in the same encoding algorithm as the source.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Convert Public Key",src:n(42078).Z,width:"606",height:"435"})),(0,i.kt)("p",null,"If successful, returns byte array containing the ",(0,i.kt)("em",{parentName:"p"},"public key")," ",(0,i.kt)(o.h8,{text:"3",mdxType:"Step"})," in target encoding."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"For Elliptic Curve type keys there's an additional input or output (depending on the conversion direction)\ncontaining the ",(0,i.kt)("em",{parentName:"p"},"Elliptic Curve Key Type"),".")),(0,i.kt)("h3",{id:"convert-private-key"},"Convert Private Key"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Convert Private Key")," converts a private key from one encoding into another. This function requires inputs as follows:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Private Key")," ",(0,i.kt)(o.h8,{text:"1",mdxType:"Step"})," : Byte array, private key encoded in the same encoding algorithm as the source.")),(0,i.kt)("p",null,"There is also an additional optional input:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Password")," ",(0,i.kt)(o.h8,{text:"2",mdxType:"Step"})," : String, pass-phrase used to decrypt the private key\n(Leave empty if key is not encrypted).")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Convert Private Key",src:n(65334).Z,width:"765",height:"533"})),(0,i.kt)("p",null,"If successful, returns byte array containing the ",(0,i.kt)("em",{parentName:"p"},"private key")," ",(0,i.kt)(o.h8,{text:"3",mdxType:"Step"})," in target encoding."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"For Elliptic Curve type keys there's an additional input or output (depending on the conversion direction)\ncontaining the ",(0,i.kt)("em",{parentName:"p"},"Elliptic Curve Key Type"),".")))}d.isMDXComponent=!0},65334:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/convert_key_pem_der-20440b2ad26f74a86051fc4536bcdcaa.png"},42078:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/convert_key_pub_pem_der-572e6ba0893feaafc5ccb2af5dd84cbb.png"}}]);