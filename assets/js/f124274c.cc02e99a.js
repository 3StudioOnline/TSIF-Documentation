"use strict";(self.webpackChunktsif_documentation=self.webpackChunktsif_documentation||[]).push([[1060],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=o,m=u["".concat(d,".").concat(f)]||u[f]||p[f]||i;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4887:(e,t,n)=>{n.d(t,{UE:()=>a,h8:()=>o,qh:()=>d,y$:()=>i});n(87462),n(67294);var r=n(3905);const o=e=>{let{children:t,text:n}=e;return(0,r.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},n)},i=e=>{let{children:t}=e;return(0,r.kt)("span",{style:{color:"#faa"}},t)};function a(e){let{children:t,version:n}=e;const o="#ffffff";return(0,r.kt)("span",{style:{backgroundColor:"#414141",color:o,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},n)}function l(e,t,n,o){return(0,r.kt)("div",{style:{backgroundColor:o,color:n,border:"1px "+n+" solid",borderRadius:"5px",padding:".1rem .4rem"}},t)}const d=e=>{let{children:t}=e;return l(0,"Released","#afa","#181")}},12580:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var r=n(87462),o=(n(67294),n(3905)),i=n(4887);const a={sidebar_position:1,title:"Creation"},l=void 0,d={unversionedId:"ipld/nodes/creation",id:"version-2.1.0/ipld/nodes/creation",title:"Creation",description:"IPLD Build Node functions create an IPLD node of a specific Kind.",source:"@site/versioned_docs/version-2.1.0/ipld/nodes/creation.mdx",sourceDirName:"ipld/nodes",slug:"/ipld/nodes/creation",permalink:"/TSIF-Documentation/docs/2.1.0/ipld/nodes/creation",draft:!1,editUrl:"https://github.com/3StudioOnline/TSIF-Documentation/edit/master/versioned_docs/version-2.1.0/ipld/nodes/creation.mdx",tags:[],version:"2.1.0",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Creation"},sidebar:"tutorialSidebar",previous:{title:"Upload Record",permalink:"/TSIF-Documentation/docs/2.1.0/ipns/functions/low-level/record/upload-record"},next:{title:"Modification",permalink:"/TSIF-Documentation/docs/2.1.0/ipld/nodes/modification"}},c={},s=[],p={toc:s};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"IPLD Build Node")," functions create an ",(0,o.kt)("inlineCode",{parentName:"p"},"IPLD")," node of a specific ",(0,o.kt)("a",{parentName:"p",href:"https://ipld.io/docs/schemas/features/typekinds/#data-model-kinds"},(0,o.kt)("inlineCode",{parentName:"a"},"Kind")),".\nThese functions require inputs as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Value")," ",(0,o.kt)(i.h8,{text:"1",mdxType:"Step"})," : Variable (Kind Dependant), the initial value of the node.")),(0,o.kt)("p",null,"There is also an additional optional input:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Outer")," ",(0,o.kt)(i.h8,{text:"2",mdxType:"Step"})," : Object, the outer object of the node (since nodes are objects themselves).\nLeaving this empty will result in a transient object.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"IPLD Build Node",src:n(21692).Z,width:"666",height:"444"})),(0,o.kt)("p",null,"The output is an IPLD ",(0,o.kt)("em",{parentName:"p"},"node")," ",(0,o.kt)(i.h8,{text:"3",mdxType:"Step"})," object created using the specified value."))}u.isMDXComponent=!0},21692:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/ipld_node_build-8bc9c1ba5eafc5c75be05754df54173d.png"}}]);