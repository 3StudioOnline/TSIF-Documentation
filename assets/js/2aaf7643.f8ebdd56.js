"use strict";(self.webpackChunktsif_documentation=self.webpackChunktsif_documentation||[]).push([[4634],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>d});var r=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,o=function(t,e){if(null==t)return{};var n,r,o={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var p=r.createContext({}),u=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},l=function(t){var e=u(t.components);return r.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,o=t.mdxType,a=t.originalType,p=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),f=u(n),d=o,m=f["".concat(p,".").concat(d)]||f[d]||c[d]||a;return n?r.createElement(m,i(i({ref:e},l),{},{components:n})):r.createElement(m,i({ref:e},l))}));function d(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var p in e)hasOwnProperty.call(e,p)&&(s[p]=e[p]);s.originalType=t,s.mdxType="string"==typeof t?t:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4887:(t,e,n)=>{n.d(e,{UE:()=>i,h8:()=>o,qh:()=>p,y$:()=>a});n(7462),n(7294);var r=n(3905);const o=t=>{let{children:e,text:n}=t;return(0,r.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},n)},a=t=>{let{children:e}=t;return(0,r.kt)("span",{style:{color:"#faa"}},e)};function i(t){let{children:e,version:n}=t;const o="#ffffff";return(0,r.kt)("span",{style:{backgroundColor:"#414141",color:o,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},n)}function s(t,e,n,o){return(0,r.kt)("div",{style:{backgroundColor:o,color:n,border:"1px "+n+" solid",borderRadius:"5px",padding:".1rem .4rem"}},e)}const p=t=>{let{children:e}=t;return s(0,"Released","#afa","#181")}},8019:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var r=n(7462),o=(n(7294),n(3905)),a=n(4887);const i={sidebar_position:7,title:"IPFS Status"},s=void 0,p={unversionedId:"ipfs-functions/ipfs-status",id:"version-3.0.1/ipfs-functions/ipfs-status",title:"IPFS Status",description:"IPFS Status Function",source:"@site/versioned_docs/version-3.0.1/ipfs-functions/ipfs-status.mdx",sourceDirName:"ipfs-functions",slug:"/ipfs-functions/ipfs-status",permalink:"/TSIF-Documentation/docs/ipfs-functions/ipfs-status",draft:!1,editUrl:"https://github.com/3StudioOnline/TSIF-Documentation/edit/master/versioned_docs/version-3.0.1/ipfs-functions/ipfs-status.mdx",tags:[],version:"3.0.1",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"IPFS Status"},sidebar:"tutorialSidebar",previous:{title:"Upload File",permalink:"/TSIF-Documentation/docs/ipfs-functions/upload-file"},next:{title:"Upload (W3UP Bridge)",permalink:"/TSIF-Documentation/docs/ipfs-functions/upload-w3up-bridge"}},u={},l=[{value:"IPFS Status Function",id:"ipfs-status-function",level:2}],c={toc:l};function f(t){let{components:e,...i}=t;return(0,o.kt)("wrapper",(0,r.Z)({},c,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"ipfs-status-function"},"IPFS Status Function"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"IPFS Status")," Gets status from the ",(0,o.kt)("em",{parentName:"p"},"IPFS")," network for the specified CID/Path. This function requires inputs as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ipfs Pinning Service ",(0,o.kt)(a.h8,{text:"1",mdxType:"Step"})," : Struct, holds the url and name of the pinning service to send the request to."),(0,o.kt)("li",{parentName:"ul"},"Ipfs Address ",(0,o.kt)(a.h8,{text:"2",mdxType:"Step"})," : Struct, holds the CID and path of the file on ",(0,o.kt)("em",{parentName:"li"},"IPFS")," network.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"IPFS Status",src:n(7628).Z,width:"1161",height:"1041"})),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"If ",(0,o.kt)("em",{parentName:"p"},"Success")," is ",(0,o.kt)("em",{parentName:"p"},"True")," that only means the upload to the ",(0,o.kt)("em",{parentName:"p"},"IPFS")," network was successful.")),(0,o.kt)("p",null,"If successful returns outputs as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Response ",(0,o.kt)(a.h8,{text:"3",mdxType:"Step"})," : Struct, holds data such as headers, status code, and body of the response of the HTTP\nrequest."),(0,o.kt)("li",{parentName:"ul"},"CID ",(0,o.kt)(a.h8,{text:"4",mdxType:"Step"})," : The ",(0,o.kt)("em",{parentName:"li"},"CID")," of the uploaded data."),(0,o.kt)("li",{parentName:"ul"},"Dag Size ",(0,o.kt)(a.h8,{text:"5",mdxType:"Step"})," : Total size of the DAG in bytes."),(0,o.kt)("li",{parentName:"ul"},"Created ",(0,o.kt)(a.h8,{text:"6",mdxType:"Step"})," : This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ for the ",(0,o.kt)("em",{parentName:"li"},"CID")," creation."),(0,o.kt)("li",{parentName:"ul"},"Pins ",(0,o.kt)(a.h8,{text:"7",mdxType:"Step"})," : Array of structs that holds info for an IPFS Pin."),(0,o.kt)("li",{parentName:"ul"},"Deals ",(0,o.kt)(a.h8,{text:"8",mdxType:"Step"})," : Array of structs that holds info for an IPFS Deal.")))}f.isMDXComponent=!0},7628:(t,e,n)=>{n.d(e,{Z:()=>r});const r=n.p+"assets/images/07_ipfs-status-8a7489a88dd416082e62018e423fd73b.png"}}]);