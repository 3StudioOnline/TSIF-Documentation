"use strict";(self.webpackChunktsif_documentation=self.webpackChunktsif_documentation||[]).push([[2409],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=o,m=u["".concat(d,".").concat(f)]||u[f]||c[f]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4887:(e,t,n)=>{n.d(t,{UE:()=>a,h8:()=>o,qh:()=>d,y$:()=>i});n(87462),n(67294);var r=n(3905);const o=e=>{let{children:t,text:n}=e;return(0,r.kt)("span",{style:{backgroundColor:"#822",color:"#faa",border:"1px #faa solid",borderRadius:"5rem",padding:".2rem .4rem",fontSize:".6rem"}},n)},i=e=>{let{children:t}=e;return(0,r.kt)("span",{style:{color:"#faa"}},t)};function a(e){let{children:t,version:n}=e;const o="#ffffff";return(0,r.kt)("span",{style:{backgroundColor:"#414141",color:o,border:"1px #ffffff solid",borderRadius:"5px",padding:".05rem .4rem",fontSize:".75rem"}},n)}function l(e,t,n,o){return(0,r.kt)("div",{style:{backgroundColor:o,color:n,border:"1px "+n+" solid",borderRadius:"5px",padding:".1rem .4rem"}},t)}const d=e=>{let{children:t}=e;return l(0,"Released","#afa","#181")}},91606:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>p});var r=n(87462),o=(n(67294),n(3905)),i=n(4887);const a={sidebar_position:3,title:"Other"},l=void 0,d={unversionedId:"ipld/nodes/other",id:"version-2.0.0/ipld/nodes/other",title:"Other",description:"Clone",source:"@site/versioned_docs/version-2.0.0/ipld/nodes/other.mdx",sourceDirName:"ipld/nodes",slug:"/ipld/nodes/other",permalink:"/TSIF-Documentation/docs/2.0.0/ipld/nodes/other",draft:!1,editUrl:"https://github.com/3StudioOnline/TSIF-Documentation/edit/master/versioned_docs/version-2.0.0/ipld/nodes/other.mdx",tags:[],version:"2.0.0",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Other"},sidebar:"tutorialSidebar",previous:{title:"Modification",permalink:"/TSIF-Documentation/docs/2.0.0/ipld/nodes/modification"},next:{title:"Introduction",permalink:"/TSIF-Documentation/docs/2.0.0/car/introduction"}},s={},p=[{value:"Clone",id:"clone",level:2},{value:"Is Equal",id:"is-equal",level:2}],c={toc:p};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"clone"},"Clone"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Clone")," function creates a duplicate of an IPLD node.\nThis is a deep copy, meaning all nested nodes will also have ",(0,o.kt)("inlineCode",{parentName:"p"},"Clone")," called on them.\nThis function requires inputs as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Node")," ",(0,o.kt)(i.h8,{text:"1",mdxType:"Step"})," : IPLD Node Object, the node to be cloned.")),(0,o.kt)("p",null,"There is also an additional optional input:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Outer")," ",(0,o.kt)(i.h8,{text:"2",mdxType:"Step"})," : Object, the outer object of the node (since nodes are objects themselves).\nLeaving this empty will result in a transient object.")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"IPLD Node Clone",src:n(46939).Z,width:"805",height:"426"})),(0,o.kt)("p",null,"This function returns a new ",(0,o.kt)("em",{parentName:"p"},"IPLD Node object")," ",(0,o.kt)(i.h8,{text:"3",mdxType:"Step"}),"\nwith its kind and value set to the kind and value of the original."),(0,o.kt)("h2",{id:"is-equal"},"Is Equal"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Is Equal")," function compares one IPLD Node ",(0,o.kt)(i.h8,{text:"1",mdxType:"Step"})," to another ",(0,o.kt)(i.h8,{text:"2",mdxType:"Step"}),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"IPLD Node Is Equal",src:n(87538).Z,width:"627",height:"333"})),(0,o.kt)("p",null,"This function returns a ",(0,o.kt)("em",{parentName:"p"},"boolean value")," ",(0,o.kt)(i.h8,{text:"3",mdxType:"Step"}),",\n",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if queried Nodes are equal in kind and value, otherwise ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."))}u.isMDXComponent=!0},46939:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/ipld_node_clone-b80d104abf7cacd7db0e357bee104a3e.png"},87538:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/ipld_node_is_equal-4c139a576c55e5e51be3477611251414.png"}}]);